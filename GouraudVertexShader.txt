#version 150

in vec3 vPosition;
in vec3 vNormal;

uniform vec3 lightPosition[3];
uniform vec3 ambiant;
uniform vec3 diffuse;
uniform vec3 spec;

uniform float vEmissivity; //shininess

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;
uniform mat4 normalMat;

out vec3 clr;

void main(){
  gl_Position = proj * view * model * vec4(vPosition, 1.0);

  vec3 total;

  for (int i = 0; i < 3; i++){
	  vec3 vertPos = vec3(model * vec4(vPosition, 1.0));
	  vec3 normalInterp = vec3(normalMat * vec4(vNormal, 0.0));

	  vec3 normal = normalize(normalInterp);
	  vec3 lightDir = normalize(lightPosition[i] - vertPos);
	  vec3 reflectDir = reflect(-lightDir, normal);
	  vec3 viewDir = normalize(-vertPos);

	  float lambertian = max(dot(lightDir,normal), 0.0);
	  float specular = 0.0;

	  if(lambertian > 0.0) {
		 float specAngle = max(dot(reflectDir, viewDir), 0.0);
		 specular = pow(specAngle, vEmissivity);
	  }
	  total += lambertian*diffuse + specular*spec;
  }

  clr = vec3(1.0) * (ambiant*diffuse + total);//we assume all lights are white
};